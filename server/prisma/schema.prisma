// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String?
  socialId String? @unique
  provider  String  // "local" for email/password, "google" for OAuth
  subscriptionStatus String  @default("inactive") // "active" or "inactive"
  stripeCustomerId String? // Stripe Customer ID
  projects  Project[] @relation("UserProjects")
  organizations Organization[] @relation("OrganizationMembers")
  teams     TeamMember[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assignedTasks Task[] @relation("AssignedTasks")
}

model Organization {
  id        String     @id @default(cuid())
  name      String
  members   User[]     @relation("OrganizationMembers") // Relation to Users
  projects  Project[]
  teams Team[]
}

model Project {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String       // Foreign key to Organization
  organization   Organization @relation(fields: [organizationId], references: [id]) // Relation to Organization
  tasks     Task[]
  team      Team?
  assignedToId String?
  assignedTo  User? @relation("UserProjects", fields: [assignedToId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String  @id @default(uuid())
  title     String
  status    String
  description String?
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  assignedToId String?
  assignedTo  User?  @relation(fields: [assignedToId], references: [id], name: "AssignedTasks")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Team {
  id        String  @id @default(uuid())
  name      String
  project   Project @relation(fields: [id], references: [id])
  members   TeamMember[]
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id      String  @id @default(uuid())
  userId  String
  teamId  String
  user    User   @relation(fields: [userId], references: [id])
  team    Team   @relation(fields: [teamId], references: [id])
  role    String // "Owner", "Member"
}

